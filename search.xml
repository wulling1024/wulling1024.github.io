<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>WSL2报错：参考对象类型不支持尝试的操作</title>
      <link href="/2020/02/08/202002/wsl2-bao-cuo-can-kao-dui-xiang-lei-xing-bu-zhi-chi/"/>
      <url>/2020/02/08/202002/wsl2-bao-cuo-can-kao-dui-xiang-lei-xing-bu-zhi-chi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>转载：Ryan（版权属于）</p><p>本文链接：<a href="https://kkp.disk.st/4608.html" target="_blank" rel="noopener">https://kkp.disk.st/4608.html</a></p></blockquote><p>突然发现WSL无法使用，Ubuntu无法启动</p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token function">PS</span> C:\WINDOWS\system32> wsl<span class="token punctuation">.</span>exe <span class="token operator">--</span>shutdown<span class="token function">PS</span> C:\WINDOWS\system32> wsl<span class="token punctuation">.</span>exeThe attempted operation is not supported <span class="token keyword">for</span> the <span class="token function">type</span> of object referenced<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>根据<a href="https://github.com/microsoft/WSL2-Linux-Kernel/issues?page=1&q=is%3Aissue+is%3Aopen" target="_blank" rel="noopener">Github issue</a>可知是WSL2目前不兼容VPN类应用（我安装了EasyConnect），复位 <strong>winsock</strong> 配置并重启计算机就可以了</p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token function">PS</span> C:\WINDOWS\system32> netsh winsock resetSucessfully reset the Winsock Catalog<span class="token punctuation">.</span>You must restart the computer in order to complete the reset<span class="token punctuation">.</span><span class="token function">PS</span> C:\WINDOWS\system32> wsl<span class="token punctuation">.</span>exeroot@TIGERHOMEPC <span class="token operator">/</span>mnt<span class="token operator">/</span>c<span class="token operator">/</span>Windows<span class="token operator">/</span>System32<span class="token comment" spellcheck="true"># exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring中的事务</title>
      <link href="/2020/02/06/202002/spring-zhong-shi-yong-shi-wu-transaction/"/>
      <url>/2020/02/06/202002/spring-zhong-shi-yong-shi-wu-transaction/</url>
      
        <content type="html"><![CDATA[<h1 id="使用配置"><a href="#使用配置" class="headerlink" title="使用配置"></a>使用配置</h1><h2 id="1、事务管理机制"><a href="#1、事务管理机制" class="headerlink" title="1、事务管理机制"></a>1、事务管理机制</h2><p>事务管理在系统开发中是不可缺少的一部分，<code>Spring</code>提供了很好事务管理机制，主要分为<code>编程式事务</code>和<code>声明式事务</code>两种。</p><p><strong>编程式事务</strong>：是指在代码中手动的管理事务的提交、回滚等操作，代码侵入性比较强，如下示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//TODO something</span>     transactionManager<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    transactionManager<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvoiceApplyException</span><span class="token punctuation">(</span><span class="token string">"异常失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>声明式事务</strong>：基于<code>AOP</code>面向切面的，它将具体业务与事务处理部分解耦，代码侵入性很低，所以在实际开发中声明式事务用的比较多。声明式事务也有两种实现方式，一是基于<code>TX</code>和<code>AOP</code>的 xml 配置文件方式，二种就是基于@Transactional 注解了。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> insert <span class="token operator">=</span> cityInfoDictMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>cityInfoDict<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、-Transaction-的作用范围"><a href="#2、-Transaction-的作用范围" class="headerlink" title="2、@Transaction 的作用范围"></a>2、@Transaction 的作用范围</h2><ul><li><strong>作用于类</strong>：当把 @Transactional 注解放在类上时，表示所有该类的<code>public</code>方法都配置相同的事务属性信息。</li><li><strong>作用于方法</strong>：当类配置了@Transactional，方法也配置了 @Transactional，<em>方法的事务会覆盖类的事务配置信息</em>。</li><li><strong>作用于接口</strong>：不推荐这种使用方法，因为一旦标注在Interface上并且配置了 Spring AOP 使用 CGLib 动态代理，将会导致 @Transactional 注解失效</li></ul><pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@Transactional</span> <span class="token annotation punctuation">@RestController</span> <span class="token annotation punctuation">@RequestMapping</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CityInfoDictMapper cityInfoDictMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        CityInfoDict cityInfoDict <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CityInfoDict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cityInfoDict<span class="token punctuation">.</span><span class="token function">setParentCityId</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cityInfoDict<span class="token punctuation">.</span><span class="token function">setCityName</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cityInfoDict<span class="token punctuation">.</span><span class="token function">setCityLevel</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cityInfoDict<span class="token punctuation">.</span><span class="token function">setCityCode</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> insert <span class="token operator">=</span> cityInfoDictMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>cityInfoDict<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> insert <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、-Transaction-的参数介绍"><a href="#3、-Transaction-的参数介绍" class="headerlink" title="3、@Transaction 的参数介绍"></a>3、@Transaction 的参数介绍</h2><ul><li><p><strong>propagation</strong> 属性：</p><p><code>propagation</code> 代表事务的 <strong>传播行为</strong>，默认值为 <code>Propagation.REQUIRED</code>，其他的属性信息如下：</p><ul><li><p><code>Propagation.REQUIRED</code>：如果当前存在事务，则加入该事务，如果当前不存在事务，则创建一个新的事务。</p><blockquote><p><strong>(</strong> 也就是说如果A方法和B方法都添加了注解，在默认传播模式下，A方法内部调用B方法，会把两个方法的事务合并为一个事务 <strong>）</strong></p></blockquote></li><li><p><code>Propagation.SUPPORTS</code>：如果当前存在事务，则加入该事务；如果当前不存在事务，则以非事务的方式继续运行。</p></li><li><p><code>Propagation.MANDATORY</code>：如果当前存在事务，则加入该事务；如果当前不存在事务，则抛出异常。</p></li><li><p><code>Propagation.REQUIRES_NEW</code>：重新创建一个新的事务，如果当前存在事务，暂停当前的事务。</p><blockquote><p><strong>(</strong> 当类A中的 a 方法用默认<code>Propagation.REQUIRED</code>模式，类B中的 b方法加上采用 <code>Propagation.REQUIRES_NEW</code>模式，然后在 a 方法中调用 b方法操作数据库，然而 a方法抛出异常后，b方法并没有进行回滚，因为<code>Propagation.REQUIRES_NEW</code>会暂停 a方法的事务 <strong>)</strong></p></blockquote></li><li><p><code>Propagation.NOT_SUPPORTED</code>：以非事务的方式运行，如果当前存在事务，暂停当前的事务。</p></li><li><p><code>Propagation.NEVER</code>：以非事务的方式运行，如果当前存在事务，则抛出异常。</p></li><li><p><code>Propagation.NESTED</code> ：和 Propagation.REQUIRED 效果一样。</p></li></ul></li><li><p><strong>isolation</strong> 属性：</p><p><code>isolation</code> ：事务的隔离级别，默认值为 <code>Isolation.DEFAULT</code>。</p><ul><li>Isolation.DEFAULT：使用底层数据库默认的隔离级别。</li><li>Isolation.READ_UNCOMMITTED</li><li>Isolation.READ_COMMITTED</li><li>Isolation.REPEATABLE_READ</li><li>Isolation.SERIALIZABLE</li></ul></li><li><p><strong>timeout</strong> 属性：</p><p>事务的超时时间，默认值为 -1。如果超过该时间限制但事务还没有完成，则自动回滚事务。</p></li><li><p><strong>readOnly</strong> 属性：</p><p>指定事务是否为只读事务，默认值为 false；为了忽略那些不需要事务的方法，比如读取数据，可以设置 read-only 为 true。</p></li><li><p><strong>rollbackFor</strong> 属性：</p><p>用于指定能够触发事务回滚的异常类型，可以指定多个异常类型。</p></li><li><p><strong>noRollbackFor</strong> 属性：</p><p>抛出指定的异常类型，不回滚事务，也可以指定多个异常类型。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后台框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Transaction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo主题使用介绍</title>
      <link href="/2020/02/02/202002/hello-world/"/>
      <url>/2020/02/02/202002/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo模板 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
